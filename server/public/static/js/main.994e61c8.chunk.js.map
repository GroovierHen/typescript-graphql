{"version":3,"sources":["components/Header/Header.tsx","components/Auth/Register.tsx","components/Auth/Login.tsx","components/Auth/ConfirmEmail.tsx","components/Auth/AuthRoute.tsx","components/Feed/Feed.tsx","components/Feed/Post.tsx","components/Feed/CreatePost.tsx","routes.tsx","App.tsx","apollo.ts","serviceWorker.ts","index.tsx"],"names":["ME_QUERY","gql","LOGOUT","Header","pathname","useLocation","data","useQuery","useMutation","logout","console","log","handleLogout","param","a","key","window","location","style","position","zIndex","width","me","theme","mode","defaultSelectedKeys","onClick","Item","to","stripeId","href","className","target","rel","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","REGISTER_USER","Register","Form","useForm","form","registerUser","error","push","useHistory","onFinish","values","firstname","lastname","email","password","variables","name","scrollToFirstError","direction","size","Title","label","rules","required","message","hasFeedback","validateStatus","help","type","Password","htmlType","LOGIN_USER","Login","loginUser","split","CONFIRM_USER","ConfirmEmail","confirmUser","token","useParams","checkConfirmUser","useCallback","useEffect","AuthRoute","component","rest","loading","render","routeProps","Component","GET_FEED","Feed","lg","getPosts","map","feed","postType","videoUrl","id","marginBottom","title","extra","url","controls","description","active","GET_POST","Post","postId","marginTop","getPostByID","marginRight","user","firstName","CREATE_POST","CreatePost","useState","setPostType","createPost","initialValues","onValuesChange","changedValues","TextArea","Option","value","Routes","Content","padding","minHeight","exact","path","App","client","ApolloClient","uri","credentials","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.994e61c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { ClickParam } from \"antd/lib/menu\";\r\n\r\nconst ME_QUERY = gql`\r\n  query {\r\n    me {\r\n      email\r\n      stripeId\r\n    }\r\n  }\r\n`;\r\n\r\nconst LOGOUT = gql`\r\n  mutation {\r\n    logout\r\n  }\r\n`;\r\n\r\nexport const Header = () => {\r\n  const { pathname } = useLocation();\r\n  const { data } = useQuery(ME_QUERY);\r\n  const [logout] = useMutation(LOGOUT);\r\n\r\n  console.log(data);\r\n\r\n  const handleLogout = async (param: ClickParam) => {\r\n    if (param.key === \"logout\") {\r\n      await logout();\r\n      window.location.pathname = \"/\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout.Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\r\n      {data?.me ? (\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          defaultSelectedKeys={[pathname]}\r\n          onClick={handleLogout}\r\n        >\r\n          <Menu.Item key=\"/\">\r\n            <Link to=\"/\">Home</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/create-post\">\r\n            <Link to=\"/create-post\">Create Post</Link>\r\n          </Menu.Item>\r\n          {!data?.me.stripeId && (\r\n            <Menu.Item>\r\n              <a\r\n                href=\"https://dashboard.stripe.com/oauth/authorize?response_type=code&client_id=ca_H8xYIQV6w2K0vj5jSfDPmJ6sbHYAa6I7&scope=read_write\"\r\n                className=\"stripe-connect\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <span>Connect with Stripe</span>\r\n              </a>\r\n            </Menu.Item>\r\n          )}\r\n\r\n          <Menu.Item key=\"logout\">Logout</Menu.Item>\r\n        </Menu>\r\n      ) : (\r\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[pathname]}>\r\n          <Menu.Item key=\"/\">\r\n            <Link to=\"/\">Home</Link>\r\n          </Menu.Item>\r\n\r\n          <Menu.Item key=\"/login\">\r\n            <Link to=\"/login\">Login</Link>\r\n          </Menu.Item>\r\n\r\n          <Menu.Item key=\"/register\">\r\n            <Link to=\"/register\">Register</Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      )}\r\n    </Layout.Header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Form, Input, Button, Typography, Space } from \"antd\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 5 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      offset: 5,\r\n    },\r\n  },\r\n};\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation(\r\n    $firstname: String!\r\n    $lastname: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    register(\r\n      data: {\r\n        firstName: $firstname\r\n        lastName: $lastname\r\n        email: $email\r\n        password: $password\r\n      }\r\n    ) {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Register = () => {\r\n  const [form] = Form.useForm();\r\n  const [registerUser, { error }] = useMutation(REGISTER_USER);\r\n  const { push } = useHistory();\r\n\r\n  const onFinish = async (values: Store) => {\r\n    const { firstname, lastname, email, password } = values;\r\n\r\n    try {\r\n      await registerUser({\r\n        variables: { firstname, lastname, email, password },\r\n      });\r\n      push(\"/login\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"register\"\r\n      onFinish={onFinish}\r\n      scrollToFirstError\r\n      {...formItemLayout}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n        <div className=\"title\">\r\n          <Typography.Title>Register</Typography.Title>\r\n        </div>\r\n        <Form.Item\r\n          name=\"firstname\"\r\n          label=\"First Name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your First Name!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"lastname\"\r\n          label=\"Last Name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Last Name!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"E-mail\"\r\n          validateStatus={error && \"error\"}\r\n          help={error && \"Email already exists\"}\r\n          rules={[\r\n            {\r\n              type: \"email\",\r\n              message: \"The input is not valid E-mail!\",\r\n            },\r\n            {\r\n              required: true,\r\n              message: \"Please input your E-mail!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { Form, Input, Button, Typography, Space } from \"antd\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 5 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      offset: 5,\r\n    },\r\n  },\r\n};\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation($email: String!, $password: String!) {\r\n    login(data: { email: $email, password: $password }) {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Login = () => {\r\n  const [form] = Form.useForm();\r\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\r\n\r\n  const onFinish = async (values: Store) => {\r\n    const { email, password } = values;\r\n    try {\r\n      await loginUser({ variables: { email, password } });\r\n      window.location.pathname = \"/\";\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"login\"\r\n      onFinish={onFinish}\r\n      scrollToFirstError\r\n      {...formItemLayout}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n        <div className=\"title\">\r\n          <Typography.Title>Login</Typography.Title>\r\n        </div>\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"E-mail\"\r\n          validateStatus={error && \"error\"}\r\n          help={error && error.message.split(\":\")[1]}\r\n          rules={[\r\n            {\r\n              type: \"email\",\r\n              message: \"The input is not valid E-mail!\",\r\n            },\r\n            {\r\n              required: true,\r\n              message: \"Please input your E-mail!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Login\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  );\r\n};\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { Typography } from \"antd\";\r\n\r\n// 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\r\n\r\nconst CONFIRM_USER = gql`\r\n  mutation($token: String!) {\r\n    confirmUser(token: $token)\r\n  }\r\n`;\r\n\r\nexport const ConfirmEmail = () => {\r\n  const [confirmUser] = useMutation(CONFIRM_USER);\r\n  const { token } = useParams();\r\n\r\n  const checkConfirmUser = useCallback(async () => {\r\n    try {\r\n      await confirmUser({ variables: { token } });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [confirmUser, token]);\r\n\r\n  useEffect(() => {\r\n    checkConfirmUser();\r\n  }, [checkConfirmUser]);\r\n\r\n  return (\r\n    <div className=\"title\">\r\n      <Typography.Title>Confirm</Typography.Title>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  RouteProps,\r\n  Route,\r\n  RouteComponentProps,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nconst ME_QUERY = gql`\r\n  query {\r\n    me {\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AuthRoute: React.FC<RouteProps> = ({ component, ...rest }) => {\r\n  const { loading, error, data } = useQuery(ME_QUERY);\r\n\r\n  const renderRoute = (routeProps: RouteComponentProps<{}>) => {\r\n    if (!data || loading || error) {\r\n      return null;\r\n    }\r\n\r\n    if (!data.me) {\r\n      // user not login\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    const Component = component as any;\r\n\r\n    return <Component {...routeProps} />;\r\n  };\r\n\r\n  return <Route {...rest} render={renderRoute} />;\r\n};\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Row, Col, Typography, Card, Skeleton } from \"antd\";\r\n\r\nconst GET_FEED = gql`\r\n  query {\r\n    getPosts {\r\n      id\r\n      videoUrl\r\n      title\r\n      postType\r\n      description\r\n      user {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Feed = () => {\r\n  const { loading, error, data } = useQuery(GET_FEED);\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"title\">\r\n        <Typography.Title>Something went wrong</Typography.Title>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={{ span: 24, offset: 0 }} lg={{ span: 12, offset: 6 }}>\r\n        <div className=\"title\">\r\n          <Typography.Title>Feed</Typography.Title>\r\n        </div>\r\n      </Col>\r\n      {data ? (\r\n        data.getPosts.map((feed: any) => {\r\n          if (feed.postType === \"Video\" && feed.videoUrl) {\r\n            return (\r\n              <Col\r\n                key={feed.id}\r\n                xs={{ span: 24, offset: 0 }}\r\n                lg={{ span: 12, offset: 6 }}\r\n                style={{ marginBottom: \"1em\" }}\r\n              >\r\n                <Card\r\n                  title={feed.title}\r\n                  extra={<Link to={`/post/${feed.id}`}>More</Link>}\r\n                >\r\n                  <ReactPlayer url={feed.videoUrl} controls width=\"100%\" />\r\n                </Card>\r\n              </Col>\r\n            );\r\n          } else {\r\n            return (\r\n              <Col\r\n                key={feed.id}\r\n                xs={{ span: 24, offset: 0 }}\r\n                lg={{ span: 12, offset: 6 }}\r\n                style={{ marginBottom: \"1em\" }}\r\n              >\r\n                <Card\r\n                  title={feed.title}\r\n                  extra={<Link to={`/post/${feed.id}`}>More</Link>}\r\n                >\r\n                  <p>{feed.description}</p>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          }\r\n        })\r\n      ) : (\r\n        <Col xs={{ span: 24, offset: 0 }} lg={{ span: 12, offset: 6 }}>\r\n          <Skeleton active loading={loading} />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Col, Typography, Card, Tag, Space } from \"antd\";\r\n\r\nconst GET_POST = gql`\r\n  query($postId: String!) {\r\n    getPostByID(postId: $postId) {\r\n      id\r\n      title\r\n      description\r\n      postType\r\n      videoUrl\r\n      user {\r\n        firstName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Post = () => {\r\n  const { postId } = useParams();\r\n  const { loading, error, data } = useQuery(GET_POST, {\r\n    variables: { postId },\r\n  });\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"title\">\r\n        <Typography.Title>Something went wrong</Typography.Title>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Col\r\n      xs={{ span: 24, offset: 0 }}\r\n      lg={{ span: 12, offset: 6 }}\r\n      style={{ marginTop: \"7em\" }}\r\n    >\r\n      {data?.getPostByID.postType === \"Video\" && data.getPostByID.videoUrl ? (\r\n        <Card title={data.getPostByID.title} loading={loading}>\r\n          <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n            <p>{data.getPostByID.description}</p>\r\n            <ReactPlayer\r\n              url={data.getPostByID.videoUrl}\r\n              controls\r\n              width=\"100%\"\r\n            />\r\n            <div>\r\n              <span style={{ marginRight: 8 }}>Post By:</span>\r\n              <Tag>{data.getPostByID.user.firstName}</Tag>\r\n              <span style={{ marginRight: 8 }}>Post Type:</span>\r\n              <Tag>{data.getPostByID.postType}</Tag>\r\n            </div>\r\n          </Space>\r\n        </Card>\r\n      ) : (\r\n        <Card title={data?.getPostByID.title} loading={loading}>\r\n          <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n            <p>{data?.getPostByID.description}</p>\r\n            <div></div>\r\n            <div>\r\n              <span style={{ marginRight: 8 }}>Post By:</span>\r\n              <Tag>{data?.getPostByID.user.firstName}</Tag>\r\n              <span style={{ marginRight: 8 }}>Post Type:</span>\r\n              <Tag>{data?.getPostByID.postType}</Tag>\r\n            </div>\r\n          </Space>\r\n        </Card>\r\n      )}\r\n    </Col>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Form, Input, Button, Typography, Space, Select } from \"antd\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 5 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      offset: 5,\r\n    },\r\n  },\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation(\r\n    $title: String!\r\n    $description: String!\r\n    $postType: String!\r\n    $videoUrl: String\r\n  ) {\r\n    createPost(\r\n      data: {\r\n        title: $title\r\n        description: $description\r\n        postType: $postType\r\n        videoUrl: $videoUrl\r\n      }\r\n    ) {\r\n      id\r\n      title\r\n      description\r\n      postType\r\n      videoUrl\r\n      user {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreatePost = () => {\r\n  const [postType, setPostType] = useState<string>(\"Text\");\r\n  const [form] = Form.useForm();\r\n  const [createPost] = useMutation(CREATE_POST);\r\n  const { push } = useHistory();\r\n\r\n  const onFinish = async (values: Store) => {\r\n    const { title, description, postType, videoUrl } = values;\r\n\r\n    try {\r\n      await createPost({\r\n        variables: { title, description, postType, videoUrl },\r\n      });\r\n      push(\"/\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"create_post\"\r\n      onFinish={onFinish}\r\n      scrollToFirstError\r\n      {...formItemLayout}\r\n      initialValues={{\r\n        postType: \"Text\",\r\n      }}\r\n      onValuesChange={(changedValues: Store) => {\r\n        if (changedValues.postType) {\r\n          setPostType(changedValues.postType);\r\n        }\r\n      }}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n        <div className=\"title\">\r\n          <Typography.Title>Create a Post</Typography.Title>\r\n        </div>\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"Title\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Title should not be empty\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Description should not be empty\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.TextArea />\r\n        </Form.Item>\r\n        <Form.Item name=\"postType\" label=\"Post type\">\r\n          <Select>\r\n            <Select.Option value=\"Text\">Text</Select.Option>\r\n            <Select.Option value=\"Video\">Video</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        {postType === \"Video\" && (\r\n          <Form.Item\r\n            name=\"videoUrl\"\r\n            label=\"Video URL\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Video URL should not be empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        )}\r\n\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Create\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport {\r\n  Register,\r\n  Login,\r\n  Header,\r\n  ConfirmEmail,\r\n  Feed,\r\n  Post,\r\n  AuthRoute,\r\n  CreatePost,\r\n} from \"./components\";\r\n\r\nexport const Routes = () => (\r\n  <BrowserRouter>\r\n    <Layout>\r\n      <Header />\r\n      <Layout.Content\r\n        className=\"site-layout\"\r\n        style={{ padding: 50, marginTop: 64 }}\r\n      >\r\n        <div\r\n          className=\"site-layout-background\"\r\n          style={{ padding: 24, minHeight: 380 }}\r\n        >\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Feed} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/confirm/:token\" component={ConfirmEmail} />\r\n            <Route exact path=\"/post/:postId\" component={Post} />\r\n            <AuthRoute exact path=\"/create-post\" component={CreatePost} />\r\n          </Switch>\r\n        </div>\r\n      </Layout.Content>\r\n    </Layout>\r\n  </BrowserRouter>\r\n);\r\n","import React from \"react\";\n\nimport { Routes } from \"./routes\";\n\nconst App = () => {\n  return <Routes />;\n};\n\nexport default App;\n","import ApolloClient from \"apollo-boost\";\r\n\r\nexport const client = new ApolloClient({\r\n  uri: \"http://localhost:4000/graphql\",\r\n  credentials: \"include\",\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport App from \"./App\";\nimport { client } from \"./apollo\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}